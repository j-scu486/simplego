// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package testapp

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type StoresOwner string

const (
	StoresOwnerState   StoresOwner = "state"
	StoresOwnerPrivate StoresOwner = "private"
)

func (e *StoresOwner) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StoresOwner(s)
	case string:
		*e = StoresOwner(s)
	default:
		return fmt.Errorf("unsupported scan type for StoresOwner: %T", src)
	}
	return nil
}

type NullStoresOwner struct {
	StoresOwner StoresOwner
	Valid       bool // Valid is true if StoresOwner is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStoresOwner) Scan(value interface{}) error {
	if value == nil {
		ns.StoresOwner, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StoresOwner.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStoresOwner) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StoresOwner), nil
}

type GowebItem struct {
	ID        uint32
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
	Name      string
	Price     float64
	Quantity  uint32
	Onsale    int8
}

type GowebStore struct {
	ID        uint32
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
	Name      string
	Owner     StoresOwner
}

type GowebStoresItem struct {
	StoreID uint32
	ItemID  uint32
}
