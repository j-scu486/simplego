// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: stores.sql

package testapp

import (
	"context"
	"database/sql"
	"time"
)

const createStore = `-- name: CreateStore :exec
INSERT INTO goweb.stores (
  name, owner, created_at, updated_at, deleted_at
)
VALUES (
  ?, ?, NOW(), NOW(), NULL
)
`

type CreateStoreParams struct {
	Name  string
	Owner StoresOwner
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) error {
	_, err := q.db.ExecContext(ctx, createStore, arg.Name, arg.Owner)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, created_at, updated_at, deleted_at, name, owner FROM goweb.stores
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetStore(ctx context.Context, id uint32) (GowebStore, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i GowebStore
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Owner,
	)
	return i, err
}

const getStoreItems = `-- name: GetStoreItems :many
SELECT i.id, i.created_at, i.updated_at, i.deleted_at, i.name, i.price, i.quantity, i.onsale, s.id AS store_id
FROM goweb.items i
JOIN goweb.stores_items si ON i.id = si.item_id
JOIN goweb.stores s ON si.store_id = s.id
WHERE s.id = ?
`

type GetStoreItemsRow struct {
	ID        uint32
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
	Name      string
	Price     float64
	Quantity  uint32
	Onsale    int8
	StoreID   uint32
}

func (q *Queries) GetStoreItems(ctx context.Context, id uint32) ([]GetStoreItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStoreItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStoreItemsRow
	for rows.Next() {
		var i GetStoreItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.Onsale,
			&i.StoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
